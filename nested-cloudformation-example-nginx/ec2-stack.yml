AWSTemplateFormatVersion: "2010-09-09"
Description: "Sets up the ec2 instances and load balancer.  Returns the DNS name of the alb."
Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application you are deploying.
  Environment:
    Type: String
    Description: Is this development, production, or testing.
  CustomVpcId:
    Type: String
    Description: The vpc id of the vpc you would like to deploy the security groups in.
  BlueJaysAMI:
    Type: String
    Description: "AMI ID must be in us-west-2 only."
    Default: "ami-05676382cb2cd06ac"
  ELBSecGroup:
    Type: String
    Description: "The ID of the ELB security group."
  InstanceSecGroup:
    Type: String
    Description: "The ID of the Instance security group."
  InstanceProfileArn:
    Type: String
    Description: "The arn of the instance profile to bind to the instance."
  AnalyticsBucket:
    Type: String
    Description: "Analytics Bucket Name"
  AutoScaleGroupSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: A comma delimited list of subnet IDs.
  InstanceSize:
    Type: String
    Description: The size of the AWS instance to create.
Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref AutoScaleGroupSubnetIds
      SecurityGroups:
        - Ref: ELBSecGroup
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
        - Key: Environment
          Value: !Ref Environment
  BlueJaysTargets:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthCheckPath: /
      HealthCheckPort: 80
      Name: !Join [ '', [!Ref ApplicationName, '-', !Ref Environment, '-', targets]]
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: CustomVpcId
  BlueJaysLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${ApplicationName}-${Environment}-launch-template"
      LaunchTemplateData:
        ImageId: !Ref BlueJaysAMI
        IamInstanceProfile:
          Arn: !Ref InstanceProfileArn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e

            # Install CloudWatch Agent
            dnf install -y amazon-cloudwatch-agent

            # Configure CloudWatch Agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<'EOF'
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "/var/log/messages",
                        "log_stream_name": "{instance_id}",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/secure",
                        "log_group_name": "/var/log/secure",
                        "log_stream_name": "{instance_id}",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/nginx/access.log",
                        "log_group_name": "/ec2/nginx/logs",
                        "log_stream_name": "access.log",
                        "timezone": "Local"
                      },
                      {
                        "file_path": "/var/log/nginx/error.log",
                        "log_group_name": "/ec2/nginx/logs",
                        "log_stream_name": "error.log",
                        "timezone": "Local"
                      }
                    ]
                  }
                }
              }
            }
            EOF

            # Create nginx config
            cat > /etc/nginx/nginx.conf <<'EOF'
            user nginx;
            worker_processes auto;
            error_log /var/log/nginx/error.log;
            pid /var/run/nginx.pid;
            include /usr/share/nginx/modules/*.conf;
            events {
            worker_connections 1024;
            }
            http {
            log_format json_combined escape=json
            '{'
              '"time_local":"$time_local",'
              '"remote_addr":"$remote_addr",'
              '"remote_user":"$remote_user",'
              '"request":"$request",'
              '"status": "$status",'
              '"body_bytes_sent":"$body_bytes_sent",'
              '"request_time":"$request_time",'
              '"http_referrer":"$http_referer",'
              '"http_user_agent":"$http_user_agent"'
            '}';
            access_log  /var/log/nginx/access.log json_combined;
            sendfile            on;
            tcp_nopush          on;
            tcp_nodelay         on;
            keepalive_timeout   65;
            types_hash_max_size 4096;
            include             /etc/nginx/mime.types;
            default_type        application/octet-stream;
            include /etc/nginx/conf.d/*.conf;
            index   index.html index.htm;

            map $http_user_agent $ignore_ua {
                "ELB-HealthChecker/2.0" 1;
            }

            server {
                listen       80;
                listen       [::]:80;
                server_name  _;
                root         /usr/share/nginx/html;
                include /etc/nginx/default.d/*.conf;
                location / {
                    if ($ignore_ua) {
                        access_log off;
                        return 200;
                    }
                }
                error_page 404 /404.html;
                    location = /40x.html {
                }
                error_page 500 502 503 504 /50x.html;
                    location = /50x.html {
                }
            }
            }
            EOF

            # Create analytics environment variable
            echo "export BLUEJAYS_ANALYTICS=${AnalyticsBucket}" > /etc/profile.d/analytics-info.sh

            # Create blue-jays profile script
            touch /etc/profile.d/blue-jays.sh
            chmod +x /etc/profile.d/blue-jays.sh

            # Install and start SSM agent
            dnf install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

            # Start CloudWatch Agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -s \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

            # Restart nginx
            systemctl restart nginx
        SecurityGroupIds:
          - Ref: InstanceSecGroup
        InstanceType: !Ref InstanceSize
  BlueJaysASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      Tags:
        -
          Key: Application
          Value: !Ref ApplicationName
          PropagateAtLaunch: true
        -
          Key: Name
          Value: BlueJaysDeliveryServer
          PropagateAtLaunch: true
        -
          Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
      TargetGroupARNs:
         - Ref: BlueJaysTargets
      MaxSize: "2"
      MinSize: "1"
      VPCZoneIdentifier: !Ref AutoScaleGroupSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref BlueJaysLaunchTemplate
        Version: !GetAtt BlueJaysLaunchTemplate.LatestVersionNumber
    UpdatePolicy:
     AutoScalingRollingUpdate:
       MinInstancesInService: 1
       MaxBatchSize: 1
       PauseTime: PT5S
  ALBHTTPListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: BlueJaysTargets
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the ALB hosting the application.
    Value:
      Fn::GetAtt: [ ApplicationLoadBalancer, DNSName ]